// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para armazenar contas de autenticação (OAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo para sessões de usuário
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo de Usuário
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  teamMembers TeamMember[]
  ownedTeams  Team[]      @relation("TeamOwner")
}

// Modelo para reset de senha
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelo de Time
model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  ownerId     String
  owner       User      @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  invitations TeamInvitation[]
}

// Modelo de relacionamento usuário-time com role
model TeamMember {
  id        String    @id @default(cuid())
  role      Role      @default(MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  userId    String
  teamId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

// Modelo para convites de time
model TeamInvitation {
  id        String    @id @default(cuid())
  email     String
  role      Role      @default(MEMBER)
  token     String    @unique
  expires   DateTime
  createdAt DateTime  @default(now())
  
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@index([email, teamId])
}

// Enumeração de permissões
enum Role {
  ADMIN
  OWNER
  MEMBER
  VIEWER
} 