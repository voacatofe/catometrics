// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:4fffda1131930d7b80f9@147.93.15.121:5433/catometrics?schema=public"
  // url      = env("DATABASE_URL")
}

// Modelo para armazenar contas de autenticação (OAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Modelo para sessões de usuário
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Modelo de Usuário
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // Campo para identificar superadministradores
  isSuperAdmin  Boolean   @default(false)
  // Campo para rastrear a última vez que o usuário fez login
  lastLogin     DateTime?
  // Status do usuário
  isActive      Boolean   @default(true)

  accounts    Account[]
  sessions    Session[]
  teamMembers TeamMember[]
  ownedTeams  Team[]      @relation("TeamOwner")
  invitations TeamInvitation[] @relation("SentInvitations")
  auditLogs   AuditLog[]  @relation("UserActions")
  
  @@map("users")
}

// Modelo para reset de senha
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo de Time
model Team {
  id           String    @id @default(cuid())
  name         String
  description  String?
  // Removendo o dashboardUrl direto aqui, pois teremos múltiplos dashboards
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  // Informações financeiras do time
  billingStatus String?  // ex: 'active', 'trial', 'suspended'
  billingCycle  String?  // ex: 'monthly', 'annual'
  nextBillingDate DateTime?
  
  ownerId     String
  owner       User      @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  invitations TeamInvitation[]
  dashboards  Dashboard[] // Um time pode ter múltiplos dashboards
  
  @@map("teams")
}

// Modelo de relacionamento usuário-time com role
model TeamMember {
  id        String    @id @default(cuid())
  role      Role      @default(MEMBER) // Agora usando o enum atualizado
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  userId    String
  teamId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@map("team_members")
}

// Modelo para convites de time
model TeamInvitation {
  id        String    @id @default(cuid())
  email     String
  role      Role      @default(MEMBER)
  token     String    @unique
  expires   DateTime
  createdAt DateTime  @default(now())
  status    InvitationStatus @default(PENDING)
  
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Quem enviou o convite
  inviterId String
  inviter   User      @relation("SentInvitations", fields: [inviterId], references: [id])
  
  @@index([email, teamId])
  @@map("team_invitations")
}

// Modelo de Dashboard atualizado
model Dashboard {
  id          String    @id @default(cuid())
  name        String
  description String?
  url         String    // URL de embed do Looker Studio
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relação com o time
  teamId      String
  team        Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  // Permissões agora com tabela própria
  permissions DashboardPermission[]
  
  // Log de visualizações
  viewLogs    DashboardViewLog[]
  
  @@map("dashboards")
}

model DashboardPermission {
  id          String    @id @default(cuid())
  userId      String?
  teamId      String
  dashboardId String
  permission  String
  createdAt   DateTime  @default(now())
  
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  
  @@map("dashboard_permissions")
}

// Novo modelo para rastrear visualizações de dashboard
model DashboardViewLog {
  id          String    @id @default(cuid())
  dashboardId String
  userId      String?
  teamId      String?
  viewedAt    DateTime  @default(now())
  ipAddress   String?
  userAgent   String?
  
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  
  @@map("dashboard_view_logs")
}

// Registro de ações (audit log)
model AuditLog {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation("UserActions", fields: [userId], references: [id])
  action      String
  entityType  String    // Por exemplo: 'team', 'user', 'dashboard'
  entityId    String?   // ID da entidade afetada
  details     String?   // Detalhes adicionais em JSON
  ipAddress   String?
  createdAt   DateTime  @default(now())
  
  @@map("audit_logs")
}

// Status de convite
enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

// Enum de papéis atualizado
enum Role {
  SUPERADMIN
  ADMIN
  MEMBER
  VIEWER
} 